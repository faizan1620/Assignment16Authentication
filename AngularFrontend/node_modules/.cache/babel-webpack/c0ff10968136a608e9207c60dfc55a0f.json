{"ast":null,"code":"import _asyncToGenerator from \"/home/dell/Desktop/My folder/Web pages/assignment10angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nconst express = require('express');\n\nconst fs = require('fs');\n\nconst router = express.Router();\n\nconst pg = require(\"./database\");\n\nrouter.get('/:id', /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (req, res) {\n    const {\n      id\n    } = req.params;\n    console.log(`Hello from get ${id}`);\n    yield pg.query(`SELECT * FROM  users,customer,role where users.uid=${id} and users.uid=customer.cid and users.uid=role.rid order by uid;`, (err, result) => {\n      if (err) console.log(\"Error\");else {\n        console.log(result.rows);\n        res.status(200).json(result.rows);\n      }\n    });\n  });\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\nrouter.get('/', /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (req, res) {\n    yield pg.query('SELECT * FROM  users,customer,role where users.uid=customer.cid and users.uid=role.rid order by uid;', (err, result) => {\n      if (err) console.log(\"Error\");else {\n        res.status(200).json(result.rows);\n      }\n    });\n  });\n\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nrouter.post('/', /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(function* (req, res) {\n    const user = req.body;\n    var queryResult = yield pg.query(`INSERT INTO users(UId,First_Name,Middle_Name,Last_Name,Email,Phone_Number,Role,Address,createdOn) VALUES (${user.uid},'${user.fname}', '${user.mname}','${user.lname}','${user.email}','${user.phonenumber}','${user.role}','${user.address}',now());\n    INSERT INTO role(rid,rname,key,description) VALUES (${user.uid},'${user.rname}', '${user.key}','${user.description}');\n    INSERT INTO customer(CName,Website,CAddress,CId) VALUES ('${user.cname}', '${user.website}','${user.caddress}','${user.uid}');`, (err, result) => {\n      if (err) {\n        res.status(404).send(\"Error in executing query\");\n      } else {\n        res.send(\"Updated\");\n      }\n    });\n  });\n\n  return function (_x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}());\nrouter.delete('/:id', /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator(function* (req, res) {\n    const {\n      id\n    } = req.params;\n    yield pg.query(`DELETE FROM role WHERE rid=${id};\n    DELETE FROM Customer WHERE cid=${id};\n    DELETE FROM users WHERE UId=${id};`, (err, result) => {\n      if (err) console.log(\"Error\");else {\n        console.log(\"Deleted\");\n        res.status(200).send(\"Successfully deleted\");\n      }\n    });\n  });\n\n  return function (_x7, _x8) {\n    return _ref4.apply(this, arguments);\n  };\n}());\nrouter.patch('/:id', /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator(function* (req, res) {\n    const {\n      id\n    } = req.params;\n    const user = req.body;\n    const queryResult = yield pg.query(`UPDATE users SET First_Name='${user.fname}',\n        Middle_Name='${user.mname}',Last_Name='${user.lname}',Email='${user.email}',\n        Phone_Number='${user.phonenumber}',Role='${user.role}',Address='${user.address}'\n        WHERE UId=${id};\n        UPDATE customer SET CName='${user.cname}',Website='${user.website}',\n        CAddress='${user.caddress}' WHERE CId=${id};\n\n        UPDATE role SET rname='${user.rname}',key='${user.key}',description='${user.description}' WHERE rid=${id};\n        \n        `, (err, result) => {\n      if (err) {\n        res.status(404).send(\"Error in updating\");\n      } else {\n        res.send(\"Updated\");\n      }\n    });\n  });\n\n  return function (_x9, _x10) {\n    return _ref5.apply(this, arguments);\n  };\n}());\nexport default router;","map":{"version":3,"sources":["/home/dell/Desktop/My folder/Web pages/assignment10angular/src/app/server/users.ts"],"names":[],"mappings":"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","sourcesContent":["const express=require('express');\nconst fs=require('fs');\nconst router=express.Router();\nconst pg=require(\"./database\");\n\n\n\nrouter.get('/:id',async (req:any,res:any)=>{ \n  const { id }=req.params;\n  console.log(`Hello from get ${id}`)\n  await pg.query(`SELECT * FROM  users,customer,role where users.uid=${id} and users.uid=customer.cid and users.uid=role.rid order by uid;`,\n    (err:any,result:any)=>{\n        if(err)\n        console.log(\"Error\");\n        else{\n           console.log(result.rows);\n            res.status(200).json(result.rows);\n            \n        }\n        \n    });\n   \n   \n});\n\nrouter.get('/',async (req:any,res:any)=>{ \n\n  await pg.query('SELECT * FROM  users,customer,role where users.uid=customer.cid and users.uid=role.rid order by uid;',\n    (err:any,result:any)=>{\n        if(err)\n        console.log(\"Error\");\n        else{\n            \n            res.status(200).json(result.rows);\n            \n        }\n        \n    });\n   \n   \n});\n\n\n\n\n\nrouter.post('/',async (req:any,res:any)=>{\n   \n    const user=req.body;\n   \n    var queryResult=await pg.query(`INSERT INTO users(UId,First_Name,Middle_Name,Last_Name,Email,Phone_Number,Role,Address,createdOn) VALUES (${user.uid},'${user.fname}', '${user.mname}','${user.lname}','${user.email}','${user.phonenumber}','${user.role}','${user.address}',now());\n    INSERT INTO role(rid,rname,key,description) VALUES (${user.uid},'${user.rname}', '${user.key}','${user.description}');\n    INSERT INTO customer(CName,Website,CAddress,CId) VALUES ('${user.cname}', '${user.website}','${user.caddress}','${user.uid}');`,(err:any,result:any)=>{\n        if(err){\n            res.status(404).send(\"Error in executing query\");\n        }\n         else{\n             res.send(\"Updated\");\n         }\n    });\n    \n});\n\nrouter.delete('/:id',async (req:any,res:any)=>{\n    const { id } = req.params;\n    await pg.query(`DELETE FROM role WHERE rid=${id};\n    DELETE FROM Customer WHERE cid=${id};\n    DELETE FROM users WHERE UId=${id};`, (err:any,result:any)=>{\n        if(err)\n        console.log(\"Error\");\n        else{\n            console.log(\"Deleted\");\n            res.status(200).send(\"Successfully deleted\");\n            \n        }\n        \n    });\n});\n\nrouter.patch('/:id',async (req:any,res:any)=>{\n    const { id } = req.params;\n    \n\n    const user = req.body;\n   \n    const queryResult=await pg.query(`UPDATE users SET First_Name='${user.fname}',\n        Middle_Name='${user.mname}',Last_Name='${user.lname}',Email='${user.email}',\n        Phone_Number='${user.phonenumber}',Role='${user.role}',Address='${user.address}'\n        WHERE UId=${id};\n        UPDATE customer SET CName='${user.cname}',Website='${user.website}',\n        CAddress='${user.caddress}' WHERE CId=${id};\n\n        UPDATE role SET rname='${user.rname}',key='${user.key}',description='${user.description}' WHERE rid=${id};\n        \n        `,(err:any,result:any)=>{\n            if(err){\n                res.status(404).send(\"Error in updating\");\n            }\n\n            else{ \n                res.send(\"Updated\");\n            }\n        });\n    \n  \n    \n}); \n\n\nexport default router;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}